/**
 *       @file  utlMath.h
 *      @brief  
 *
 *
 *     @author  Dr. Jian Cheng (JC), jian.cheng.1983@gmail.com
 *
 *   @internal
 *     Created  "06-29-2014
 *    Revision  1.0
 *    Compiler  gcc/g++
 *     Company  IDEA@UNC-CH
 *   Copyright  Copyright (c) 2014, Jian Cheng
 *
 * =====================================================================================
 */

#ifndef __utlMath_h
#define __utlMath_h

#include <tr1/cmath>
#include "utlCore.h"

namespace utl
{

/**
 * \brief  BesselJPrimeZeros in Mathematica, the k-th solution of J'_m(x)=0
 */
const static double BesselJPrimeZerosTable[] = 
  {
   // 10 in order 0
   0.0,3.8317059702075125,7.0155866698156055,10.173468135062722,13.323691936314223,16.47063005087763,19.615858510468243,22.760084380592772,25.903672087618382,29.046828534916855,           
   // 10 in order 1
   1.841183781340659,5.3314427735250325,8.536316366346284,11.706004902592063,14.863588633909034,18.015527862681804,21.16436985918879,24.311326857210776,27.457050571059245,30.601922972669094,
   // 10 in order 2
   3.0542369282271404,6.706133194158457,9.969467823087596,13.170370856016122,16.347522318321783,19.512912782488204,22.671581772477424,25.826037141785264,28.977672772993678,32.127327020443474,
   // 10 in order 3
   4.201188941210528,8.015236598375951,11.345924310742964,14.585848286167028,17.78874786606647,20.9724769365377,24.144897432909264,27.310057930204348,30.470268806290424,33.62694918279668,
   // 10 in order 4
   5.317553126083994,9.282396285241617,12.68190844263889,15.964107037731551,19.196028800048904,22.401032267689004,25.589759681386735,28.767836217666503,31.938539340972785,35.10391667734677,
   // 10 in order 5
   6.41561637570024,10.519860873772291,13.9871886301403,17.312842487884627,20.57551452138689,23.803581476593862,27.01030789777772,30.20284907898166,33.38544390101012,36.56077768688036,
   // 10 in order 6
   7.5012661446841475,11.734935953042752,15.268181461097873,18.637443009666203,21.931715017802237,25.183925599499627,28.409776362510083,31.617875716105036,34.81339298429743,37.9996408977153,
   // 10 in order 7
   8.57783648971416,12.93238623709143,16.529365884366943,19.941853366527344,23.26805292645757,26.545032061823576,29.790748583196613,33.015178641375144,36.22438054878716,39.42227457893926,
   // 10 in order 8
   9.647421651997242,14.11551890789478,17.774012366915255,21.229062622853125,24.58719748631768,27.889269427955092,31.155326556188324,34.396628554272176,37.620078044197086,40.83017868182204,
   // 10 in order 9
   10.711433970699948,15.286737667333524,19.004593537946054,22.501398726777285,25.891277276839137,29.21856349993608,32.50524735237553,35.7637929288088,39.00190281151422,42.22463843075328,
   // 10 in order 10
   11.770876674955586,16.447852748486536,20.223031412681703,23.760715860327448,27.182021527190532,30.534504754007074,33.84196577513571,37.118000423665606,40.37106890533389,43.60676490137951,
  };

/** pre-computed table for Gamma[1/2], Gamma[3/2], etc. Table[N[Gamma[n/2], 35], {n, 1, 60, 2}] in mathematica. */
const static double GammaHalfIntegerTable[30] =
  {
1.7724538509055160272981674833411452, 
0.88622692545275801364908374167057259, 
1.3293403881791370204736256125058589, 
3.3233509704478425511840640312646472, 
11.631728396567448929144224109426265, 
52.342777784553520181149008492418194, 
287.88527781504436099631954670830007, 
1871.2543057977883464760770536039504, 
14034.407293483412598570577902029628, 
119292.46199460900708784991216725184, 
1.1332783889487855673345741655888925*1e6, 
1.1899423083962248457013028738683371*1e7, 
1.3684336546556585725564983049485877*1e8, 
1.7105420683195732156956228811857346*1e9, 
2.3092317922314238411890908896007417*1e10, 
3.3483860987355645697241817899210754*1e11, 
5.1899984530401250830724817743776669*1e12, 
8.5634974475162063870695949277231504*1e13, 
1.4986120533153361177371791123515513*1e15, 
2.7724322986333718178137813578503700*1e16, 
5.4062429823350750447368736478082214*1e17, 
1.1082798113786903841710590978006854*1e19, 
2.3828015944641843259677770602714736*1e20, 
5.3613035875444147334274983856108156*1e21, 
1.2599063430729374623554621206185417*1e23, 
3.0867705405286967827708821955154271*1e24, 
7.8712648783481767960657495985643390*1e25, 
2.0858851927622668509574236436195498*1e27, 
5.7361842800962338401329150199537621*1e28, 
1.6348125198274266444378807806868222*1e30
  };

  
/** pre-computed table for factorial of integers. Table[n!, {n, 0, 30}] in mathematica  */
const static unsigned long FactorialTable[21]=
  {
  1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 
  39916800, 479001600, 6227020800, 87178291200, 1307674368000, 20922789888000, 
  355687428096000, 6402373705728000, 121645100408832000,2432902008176640000
  // , 
  // 51090942171709440000, 1124000727777607680000, 
  // 25852016738884976640000, 620448401733239439360000, 
  // 15511210043330985984000000, 403291461126605635584000000, 
  // 10888869450418352160768000000, 304888344611713860501504000000, 
  // 8841761993739701954543616000000, 265252859812191058636308480000000
  };

/** calculate exp(-dist) using LUT */
inline double
ExpNegtiveLUT(const double dist, const double distMax=30.0, const int precision=1000 )
{
  if (dist >= distMax-1) 
    return 0.0;

  static int LUT_LENGTH = (int) rintf( distMax * (double) precision);
  static std::vector<double> EXP_LUT(LUT_LENGTH,-1.0);
  
  static bool is_firstTime = true;
  if (is_firstTime)
    {
    for (int i=0; i< LUT_LENGTH; i++)   
      EXP_LUT[i] = std::exp( - (double) i / (double)precision);
    is_firstTime = false;
    }

  double distPrecision = dist* (double)precision;
  int x = (int) std::floor(distPrecision);
  return EXP_LUT[x] + (EXP_LUT[x+1]-EXP_LUT[x])*(distPrecision-x);
}

inline double
PowInteger(const double a, const long b)
{
  if (b==0)
    return 1;

  if (b<0)
    return 1.0/PowInteger(a, -b);

  double result = a;
  for ( long i = 1; i < b; i += 1 ) 
    result *= a;
  return result;
}

/** efficient way to calculate std::pow(a,b) when b is integer or half integer */
inline double
PowHalfInteger(const double a, const double b)
{

  if (b==0)
    return 1;

  if (b<0)
    return 1.0/PowHalfInteger(a, -b);
  
  if (utl::IsInt(b))
    return PowInteger(a, (long)b);

  utlException(!utl::IsInt(2*b), "b need to be an integer or a half integer.");

  long b_int = long(b-0.5);
  return std::sqrt(a)*PowInteger(a, b_int);
}

/** factorial of non-negative value n using a static table. */
inline unsigned long 
Factorial(const int n)
{
  utlException(n<0, "n should be non-negative");
  if(n <= 1) // n=0,1 return 1
    return 1;

  utlException(n>20, "n is too big for the table");
  
  return FactorialTable[n];
}

template <typename T>
inline T 
Factorial ( const T v1, const int times )
{
  T result = v1;
  for ( int i = 1; i < times; i += 1 ) 
    {
    result *= v1 - i;
    }
  return result;
}

/**
 * \brief  generalized binomial coefficients
 * \note   if times==0, return 1 whatever v1 is.
 */
template <typename T>
inline T 
Binomial ( const T v1, const int times )
{
  utlException(times<0, "negative value is invalid");
  if (times==0)
    return 1;
  T fac_1 = Factorial(v1,times);
  unsigned long fac_2 = Factorial(times);
  return fac_1 / T(fac_2);
}

inline double 
LegendrePolynomialAt0(const int order)
{
  if(order == 0)
    return 1.0;
  if(order % 2 != 0)
    return 0.0;
  else 
    {
    double odd = 1;
    double even = 2;

    for(int i = 3; i <= order - 1; i+=2) 
      odd = odd * i;
    for(int i = 4; i <= order; i+=2) 
      even = even * i;

    if((order / 2) % 2 == 0)
      return odd / even;
    else
      return -1 * odd / even;
    }
}

/** get the coefficient vector of nth order Lagurre polynomial L_n^{alpha}(x). 
 *      The default value of alpha is 0.5 for \c DiffusionMRI::EAP class. 
 * \note  the ith coefficient of n order Lagurre polynomial has a closed form 
 *     \f$ (-1)^i\binom{n+0.5}{n-i}\frac{1}{i!} \f$. 
 *     But here we use a recursive way that is more accurate when n is big.
 *   \f$L_n^a(x) =(2+(a-1-x)/n)*L_{n-1}^a(x) - (1+(a-1)/n)*L_{n-2}^a(x)\f$
 *   Also use pre-computed table Table[CoefficientList[LaguerreL[n, a, x], x], {n, 0, 10}] in mathematica.
 *     */ 
inline std::vector<double>
GetCoefLaguerre (const int n, const double a=0.5)
{
  utlException(n<0, "n should > 0");
  std::vector<double> coef(n+1);
  if (n==0)
    {
    coef[0] = 1;
    }
  else if (n==1)
    {
    coef[0]=1+a; coef[1]=-1.0;
    }
  else if (n==2)
    {
    double a2= a*a;
    coef[0]=1+(3*a)/2.0+a2/2.0; coef[1]=-2-a; coef[2]=1.0/2.0;
    }
  else if (n==3)
    {
    double a2= a*a;
    double a3= a2*a;
    coef[0]=1+(11*a)/6.0+a2+a3/6.0; coef[1]=-3-(5*a)/2.0-a2/2.0; 
    coef[2]=3.0/2.0+a/2.0; 
    coef[3]=-1.0/6.0; 
    }
  else if (n==4)
    {
    double a2= a*a;
    double a3= a2*a;
    double a4= a3*a;
    coef[0]=1+ (25*a)/12.0+(35*a2)/24.0+(5*a3)/12.0+a4/24.0; 
    coef[1]=-4-(13*a)/3.0-(3*a2)/2.0-a3/6.0;
    coef[2]=3+(7*a)/4.0+a2/4.0; 
    coef[3]=-(2.0/3.0)-a/6.0; 
    coef[4]=1/24.0;
    }
  else if (n==5)
    {
    double a2= a*a;
    double a3= a2*a;
    double a4= a3*a;
    double a5= a4*a;
    coef[0]=1+(137*a)/60.0+(15*a2)/8.0+(17*a3)/24.0+a4/8.0+a5/120.0; 
    coef[1]=-5-(77*a)/12.0-(71*a2)/24.0-(7*a3)/12.0-a4/24.0; 
    coef[2]=5+(47*a)/12.0+a2+a3/12.0;
    coef[3]=-(5.0/3.0)-(3*a)/4.0-a2/12.0; 
    coef[4]=5.0/24.0+a/24.0;
    coef[5]=-(1/120.0);
    }
  else if (n==6)
    {
    double a2= a*a;
    double a3= a2*a;
    double a4= a3*a;
    double a5= a4*a;
    double a6= a5*a;
    coef[0]=1+(49*a)/20.0+(203*a2)/90.0+(49*a3)/48.0+(35*a4)/144.0+(7*a5)/240.0+a6/720.0;
    coef[1]=-6-(87*a)/10.0-(29*a2)/6.0-(31*a3)/24.0-a4/6.0-a5/120.0;
    coef[2]=15/2.0+(57*a)/8.0+(119*a2)/48.0+(3*a3)/8.0+a4/48.0;
    coef[3]=-(10/3.0)-(37*a)/18.0-(5*a2)/12.0-a3/36.0;
    coef[4]=5/8.0+(11*a)/48.0+a2/48.0;
    coef[5]=-(1/20.0)-a/120.0;
    coef[6]=1/720.0;
    }
  else if (n==7)
    {
    double a2= a*a;
    double a3= a2*a;
    double a4= a3*a;
    double a5= a4*a;
    double a6= a5*a;
    double a7= a6*a;
    coef[0]=1.+(363.*a)/140.0+(469.*a2)/180.0+(967.*a3)/720.0+(7.*a4)/18.0+(23.*a5)/360.0+a6/180.0+a7/5040.0;
    coef[1]=-7-(223.*a)/20.0-(319*a2)/45.0-(37*a3)/16.0-(59*a4)/144.0-(3*a5)/80.0-a6/720.0;
    coef[2]=21/2.0+(459*a)/40.0+(235*a2)/48.0+(49*a3)/48.0+(5*a4)/48.0+a5/240.0;
    coef[3]=-(35.0/6.0)-(319*a)/72.0-(179*a2)/144.0-(11*a3)/72.0-a4/144.0;
    coef[4]=35.0/24.0+(107*a)/144.0+a2/8.0+a3/144.0;
    coef[5]=-(7.0/40.0)-(13*a)/240.0-a2/240.0;
    coef[6]=7.0/720.0+a/720.0;
    coef[7]=-(1.0/5040);
    }
  else if (n==8)
    {
    double a2= a*a;
    double a3= a2*a;
    double a4= a3*a;
    double a5= a4*a;
    double a6= a5*a;
    double a7= a6*a;
    double a8= a7*a;
    coef[0]=1+(761*a)/280.0+(29531*a2)/10080.0+(267*a3)/160.0+(1069*a4)/1920.0+(9*a5)/80.0+(13*a6)/960.0+a7/1120.0+a8/40320.0;
    coef[1]=-8-(481*a)/35.0-(349*a2)/36.0-(329*a3)/90.0-(115*a4)/144.0-(73*a5)/720.0-a6/144.0-a7/5040.0;
    coef[2]=14+(341*a)/20.0+(6077*a2)/720.0+(209*a3)/96.0+(89*a4)/288.0+(11*a5)/480.0+a6/1440.0;
    coef[3]=-(28/3.0)-(743*a)/90.0-(23*a2)/8.0-(71*a3)/144.0-a4/24.0-a5/720.0;
    coef[4]=35/12.0+(533*a)/288.0+(251*a2)/576.0+(13*a3)/288.0+a4/576.0;
    coef[5]=-(7/15.0)-(73*a)/360.0-(7*a2)/240.0-a3/720.0;
    coef[6]=7/180.0+a/96.0+a2/1440.0;
    coef[7]=-(1/630.0)-a/5040.0;
    coef[8]=1./40320.0;
    }
  else
    {
    std::vector<double> coef_1 = GetCoefLaguerre(n-1,a);
    std::vector<double> coef_2 = GetCoefLaguerre(n-2,a);
    for ( int i = 1; i < n-1; i += 1 ) 
      coef[i] = coef_1[i]* (2.0+(a-1)/double(n)) + coef_1[i-1]*(-1.0/double(n)) - coef_2[i]*(1+(a-1)/n);
    coef[0] = coef_1[0]*(2.0+(a-1)/double(n)) - coef_2[0]*(1+(a-1)/n);
    coef[n-1] = coef_1[n-1]* (2.0+(a-1)/double(n)) + coef_1[n-2]*(-1.0/double(n));
    coef[n] = coef_1[n-1]*(-1.0/double(n));
    }
  return coef;
}    // -----  end of method getCoefLaguerre  -----

/** get the coefficient vector of the product of \f$L_{n1}^{a1}(x)\f$ and \f$L_{n2}^{a2}(x)\f$   */
inline std::vector<double>
GetCoefLaguerreProduct ( const int n1, const double a1, const int n2, const double a2)
{
  utlException(n1<0 || n2<0, "n1 and n2 should > 0");
  std::vector<double> coef(n1+n2+1,0);
  std::vector<double> coef1 = GetCoefLaguerre(n1,a1);
  std::vector<double> coef2 = GetCoefLaguerre(n2,a2);
  for ( int nn = 0; nn < n1+n2+1; nn += 1 ) 
    {
    for ( int j = 0; j<n1+1 && j<=nn; j += 1 ) 
      {
      int i = nn-j;
      if (i<n2+1)
        coef[nn] += coef1[j]*coef2[i];
      }
    }
  return coef;
}    // -----  end of method getCoefLaguerreProduct  -----

inline double 
GammaHalfInteger(const double x)
{
  utlException(x<=0, "x should be half of a positive integer");
  if (utl::IsInt(x))
    return Factorial(x-1);

  utlException(!utl::IsInt(2*x), "x should be half of a positive integer");
  
  const static int TABLE_LENGTH = 30; 
  
  if (x>TABLE_LENGTH)
    {
    double result=1, tmp=x-1;
    for ( long x_floor = std::floor(x); x_floor>=TABLE_LENGTH; x_floor-- ) 
      {
      result *= tmp;
      tmp -= 1;
      }
    return result*GammaHalfIntegerTable[TABLE_LENGTH-1];
    }
  else 
    {
    int x_floor = std::floor(x);
    return GammaHalfIntegerTable[x_floor];
    }
}
/** get the legendre coefficient vector of \f$ \exp(-a\times x^2) \f$, 
 * i.e.\f$ \exp(-a\times x^2) = \sum_{l=0}^{lMax} A_l(a) P_l(x) \f$  */
inline double
GetExpLegendreCoef(const double a, const int l )
{
  // coefficient for odd order is 0;
  if (!utl::IsInt(0.5*l))
    return 0;
  
  if (std::fabs(a)<1e-10)
    return l==0 ? 1.0 : 0.0;

  double result = -1000.0;
  switch ( l )
    {
    case 0 :
       result = (std::sqrt(M_PI)*std::tr1::erf(std::sqrt(a)))/(2.*std::sqrt(a));
       break;
    case 2 :
       result = (5*(-3/(2.*a*std::pow(M_E,a)) + ((3 - 2*a)*std::sqrt(M_PI)*std::tr1::erf(std::sqrt(a)))/(4.*std::pow(a,1.5))))/2. ;
       break;
    case 4 :
       result = (9*((-5*(21 + 2*a))/(16.*std::pow(a,2)*std::pow(M_E,a)) + (3*(35 + 4*(-5 + a)*a)*std::sqrt(M_PI)*std::tr1::erf(std::sqrt(a)))/(32.*std::pow(a,2.5))))/2. ;
       break;
    case 6 : 
       result = (13*(-42*std::sqrt(a)*(165 + 20*a + 4*std::pow(a,2)) - 5*(-693 + 378*a - 84*std::pow(a,2) + 8*std::pow(a,3))*std::pow(M_E,a)*std::sqrt(M_PI)*std::tr1::erf(std::sqrt(a))))/(256.*std::pow(a,3.5)*std::pow(M_E,a));
       break;
    case 8 :
       result = (17*(-6*std::sqrt(a)*(225225 + 2*a*(15015 + 2*a*(1925 + 62*a))) + 35*(19305 + 8*a*(-1287 + a*(297 + 2*(-18 + a)*a)))*std::pow(M_E,a)*std::sqrt(M_PI)*std::tr1::erf(std::sqrt(a))))/(4096.*std::pow(a,4.5)*std::pow(M_E,a)) ;
       break;
    case 10 : 
       result = (21*(-22*std::sqrt(a)*(3968055 + 556920*a + 157248*std::pow(a,2) + 7488*std::pow(a,3) + 464*std::pow(a,4)) - 63*(-692835 + 364650*a - 85800*std::pow(a,2) + 11440*std::pow(a,3) - 880*std::pow(a,4) + 32*std::pow(a,5))*std::pow(M_E,a)*std::sqrt(M_PI)*std::tr1::erf(std::sqrt(a))))/(16384.*std::pow(a,5.5)*std::pow(M_E,a)) ; 
      break;
    case 12 : 
      result = (25*(-26*std::sqrt(a)*(540571185 + 2*a*(39171825 + 4*a*(2909907 + 2*a*(82467 + a*(7469 + 122*a))))) + 231*(30421755 + 4*a*(-3968055 + a*(944775 + 4*a*(-33150 + a*(2925 + 4*(-39 + a)*a)))))*std::pow(M_E,a)*std::sqrt(M_PI)*std::tr1::erf(std::sqrt(a))))/(131072.*std::pow(a,6.5)*std::pow(M_E,a)) ; 
      break;
    case 14 : 
      result = (29*(-2*std::sqrt(a)*(677644592625 + 100391791500*a + 30786816060*std::pow(a,2) + 1928852640*std::pow(a,3) + 206187696*std::pow(a,4) + 5360576*std::pow(a,5) + 158528*std::pow(a,6)) - 429*(-1579591125 + 819047250*a - 196571340*std::pow(a,2) + 28488600*std::pow(a,3) - 2713200*std::pow(a,4) + 171360*std::pow(a,5) - 6720*std::pow(a,6) + 128*std::pow(a,7))*std::pow(M_E,a)*std::sqrt(M_PI)*std::tr1::erf(std::sqrt(a))))/(524288.*std::pow(a,7.5)*std::pow(M_E,a)) ; 
      break;
    case 16 :
      result = (33*(-34*std::sqrt(a)*(3583544051587.5e1 + 2*a*(269729122162.5e1 + 2*a*(42253133422.5e1 + 2*a*(1413077737.5e1 + 2.0*a*(82956802.5e1 + 2*a*(1343803.5e1 + 62415.0e1*a + 6196*std::pow(a,2))))))) + 6435*(94670161425 + 16*a*(-305387617.5e1 + a*(73714252.5e1 + 2*a*(-5460315.0e1 + a*(5460315 + 8*a*(-47481 + a*(2261 + (-68 + a)*a)))))))*std::pow(M_E,a)*std::sqrt(M_PI)*std::tr1::erf(std::sqrt(a))))/(1.6777216e7*std::pow(a,8.5)*std::pow(M_E,a)) ; 
      break;
    case 18 : 
      result = (3.7e1*(-11.4e1*std::sqrt(a)*(137159624664562.5e1 + 8*a*(2612564279325.0e1 + a*(831270452512.5e1 + 4*a*(14556809767.5e1 + 2*a*(907887337.5e1 + 2*a*(16773900.0e1 + a*(961273.5e1 + 2*a*(7939.0e1 + 136.3e1*a)))))))) - 1215.5e1*(-643200214387.5e1 + 2*a*(165394340842.5e1 + 8*a*(-5011949722.5e1 + 2*a*(377243527.5e1 + a*(-39025192.5e1 + 2*a*(1445377.5e1 + 4*a*(-192717 + a*(7182 + a*(-171 + 2*a)))))))))*std::pow(M_E,a)*std::sqrt(M_PI)*std::tr1::erf(std::sqrt(a))))/(6.7108864e7*std::pow(a,9.5)*std::pow(M_E,a)) ; 
      break;
    case 20 : 
      result = (41.0*(-30.0*std::sqrt(a)*(150420217177132402.5e1 + 2*a*(11570785936702492.5e1 + 8*a*(465611205861301.5e1 + 2*a*(16877165244439.5e1 + a*(2196137366923.5e1 + 2*a*(44317398625.5e1 + 4*a*(718677745.5e1 + a*(15248765.4e1 + a*(430226.5e1 + 2879.4e1*a))))))))) + 46189*(48849363650587.5e1 + 4*a*(-6262738929562.5e1 + a*(1523368928812.5e1 + 8*a*(-29016551025.0e1 + a*(3077512987.5e1 + 4*a*(-59564767.5e1 + a*(3423262.5e1 + 2*a*(-724500 + a*(21735 + 4*(-105 + a)*a)))))))))*std::pow(M_E,a)*std::sqrt(M_PI)*std::tr1::erf(std::sqrt(a))))/(5.36870912e8*std::pow(a,10.5)*std::pow(M_E,a)) ; 
      break;
    case 22 : 
      result = 45*(-46* std::sqrt(a)*(15722777246044531162.5e1 + 4*a*(609409970776919812.5e1 + a*(197983922213379802.5e1 + 8*a*(1842440222557935.0e1 + a*(247349944474132.5e1 + 4*a*(2659408317247.5e1 + a*(187282275862.5e1 + 2.0*a*(2316815046.0e1 + a*(83165764.5e1 + 4*a*(238528.5e1 + 2662.9e1*a)))))))))) -  8817.9e1*(-4101020386475512.5e1 + 2*a*(1049098238400712.5e1 + 2*a*(-127938809561062.5e1 +    2*a*(9841446889312.5e1 + 4*a*(-265985051062.5e1 + 2*a*(10639402042.5e1 + 2*a*(-322406122.5e1 + 2*a*(7428712.5e1 + a*(-256162.5e1 + 2*a*(3162.5e1 - 50.6e1*a + 4.0* std::pow(a,2)))))))))))*   std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a)))  ; 
      result /= (2.147483648e9* std::pow(a,11.5)* std::pow(M_E,a));
      break;
    case 24 :
      result =(49.0*(-30.0* std::sqrt(a)*(16996322202974138186662.5e1 + 2*a*(1325954214416422128037.5e1 + 
             2*a*(216974325995414530042.5e1 + 2*a*(8249669832974417347.5e1 + 4*a*
                    (283606141073075320.5e1 + 2*a*(6398463995484151.5e1 + 2*a*(238903097649898.5e1 + 2*a*(3282810567991.5e1 + a*(136370408128.5e1 + 2*a*(1026865776.3e1 + 2*a*(9717230.9e1 + 46910.2e1*a)))))))
                   )))) + 67603.9e1*(377115570321552562.5e1 + 8.0*a*(-24071206616269312.5e1 + 
             a*(5884072728421387.5e1 + 2*a*(-456129668869875.0e1 + a*(50063012436937.5e1 + 
                      16.0*a*(-256733397112.5e1 + a*(16190394412.5e1 + a*(-792998910.0e1 + a*(30037837.5e1 + 8.0*a*(-107662.5e1 + a*(2227.5e1 + 2*(-15.0e1 + a)*a)))))))))))*std::pow(M_E,a)*std::sqrt(M_PI)*std::tr1::erf(std::sqrt(a))))/
   (3.4359738368e10*std::pow(a,12.5)*std::pow(M_E,a)) ;
      break;
    default :
      utlException(true, "l is too big. l=" << l);
       break;
    }
  return result;
}

/** get the derivative \f$\frac{\partial A_l(a)}{\partial a}\f$ of the legendre coefficient vector of \f$ \exp(-a\times x^2) \f$, 
 * i.e.\f$ \exp(-a\times x^2) = \sum_{l=0}^{lMax} A_l(a) P_l(x) \f$  */
inline double
GetExpLegendreCoefDerivative(const double a, const int l )
{
  // coefficient for odd order is 0;
  if (!utl::IsInt(0.5*l))
    return 0;

  double result = -1000.0;
  switch ( l )
    {
    case 0 :
       result = 1/(2.*a* std::pow(M_E,a)) - ( std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a)))/(4.* std::pow(a,1.5)) ; 
       break;
    case 2 :
       result = (5*(3/(2.* std::pow(a,2)* std::pow(M_E,a)) + (3 - 2*a)/(4.* std::pow(a,2)* std::pow(M_E,a)) + 3/(2.*a* std::pow(M_E,a)) - (3*(3 - 2*a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a)))/(8.* std::pow(a,2.5)) - ( std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a)))/(2.* std::pow(a,1.5))))/2. ; 
       break;
    case 4 :
       result = (9*(-5/(8.* std::pow(a,2)* std::pow(M_E,a)) + (5*(21 + 2*a))/(8.* std::pow(a,3)* std::pow(M_E,a)) + (5*(21 + 2*a))/(16.* std::pow(a,2)* std::pow(M_E,a)) + (3*(35 + 4*(-5 + a)*a))/(32.* std::pow(a,3)* std::pow(M_E,a)) + (3*(4*(-5 + a) + 4*a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a)))/(32.* std::pow(a,2.5)) - (15*(35 + 4*(-5 + a)*a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a)))/(64.* std::pow(a,3.5))))/2. ; 
       break;
    case 6 : 
       result = (-91*(-42* std::sqrt(a)*(165 + 20*a + 4* std::pow(a,2)) - 5*(-693 + 378*a - 84* std::pow(a,2) + 8* std::pow(a,3))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a))))/(512.* std::pow(a,4.5)* std::pow(M_E,a)) - (13*(-42* std::sqrt(a)*(165 + 20*a + 4* std::pow(a,2)) - 5*(-693 + 378*a - 84* std::pow(a,2) + 8* std::pow(a,3))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a))))/(256.* std::pow(a,3.5)* std::pow(M_E,a)) + (13*(-42* std::sqrt(a)*(20 + 8*a) - (21*(165 + 20*a + 4* std::pow(a,2)))/ std::sqrt(a) - (5*(-693 + 378*a - 84* std::pow(a,2) + 8* std::pow(a,3)))/ std::sqrt(a) - 5*(378 - 168*a + 24* std::pow(a,2))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a)) - 5*(-693 + 378*a - 84* std::pow(a,2) + 8* std::pow(a,3))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a))))/(256.* std::pow(a,3.5)* std::pow(M_E,a)) ;
       break;
    case 8 :
       result = (-153*(-6* std::sqrt(a)*(225225 + 2*a*(15015 + 2*a*(1925 + 62*a))) + 35*(19305 + 8*a*(-1287 + a*(297 + 2*(-18 + a)*a)))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a))))/(8192.* std::pow(a,5.5)* std::pow(M_E,a)) - (17*(-6* std::sqrt(a)*(225225 + 2*a*(15015 + 2*a*(1925 + 62*a))) + 35*(19305 + 8*a*(-1287 + a*(297 + 2*(-18 + a)*a)))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a))))/(4096.* std::pow(a,4.5)* std::pow(M_E,a)) + (17*(-6* std::sqrt(a)*(2*a*(124*a + 2*(1925 + 62*a)) + 2*(15015 + 2*a*(1925 + 62*a))) - (3*(225225 + 2*a*(15015 + 2*a*(1925 + 62*a))))/ std::sqrt(a) + (35*(19305 + 8*a*(-1287 + a*(297 + 2*(-18 + a)*a))))/ std::sqrt(a) + 35*(8*a*(297 + 2*(-18 + a)*a + a*(2*(-18 + a) + 2*a)) + 8*(-1287 + a*(297 + 2*(-18 + a)*a)))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a)) + 35*(19305 + 8*a*(-1287 + a*(297 + 2*(-18 + a)*a)))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a))))/(4096.* std::pow(a,4.5)* std::pow(M_E,a)) ;
       break;
    case 10 : 
       result = (-231*(-22* std::sqrt(a)*(3968055 + 556920*a + 157248* std::pow(a,2) + 7488* std::pow(a,3) + 464* std::pow(a,4)) - 63*(-692835 + 364650*a - 85800* std::pow(a,2) + 11440* std::pow(a,3) - 880* std::pow(a,4) + 32* std::pow(a,5))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a))))/(32768.* std::pow(a,6.5)* std::pow(M_E,a)) - (21*(-22* std::sqrt(a)*(3968055 + 556920*a + 157248* std::pow(a,2) + 7488* std::pow(a,3) + 464* std::pow(a,4)) - 63*(-692835 + 364650*a - 85800* std::pow(a,2) + 11440* std::pow(a,3) - 880* std::pow(a,4) + 32* std::pow(a,5))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a))))/(16384.* std::pow(a,5.5)* std::pow(M_E,a)) + (21*(-22* std::sqrt(a)*(556920 + 314496*a + 22464* std::pow(a,2) + 1856* std::pow(a,3)) - (11*(3968055 + 556920*a + 157248* std::pow(a,2) + 7488* std::pow(a,3) + 464* std::pow(a,4)))/ std::sqrt(a) - (63*(-692835 + 364650*a - 85800* std::pow(a,2) + 11440* std::pow(a,3) - 880* std::pow(a,4) + 32* std::pow(a,5)))/ std::sqrt(a) - 63*(364650 - 171600*a + 34320* std::pow(a,2) - 3520* std::pow(a,3) + 160* std::pow(a,4))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a)) - 63*(-692835 + 364650*a - 85800* std::pow(a,2) + 11440* std::pow(a,3) - 880* std::pow(a,4) + 32* std::pow(a,5))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a))))/(16384.* std::pow(a,5.5)* std::pow(M_E,a)) ;
      break;
    case 12 : 
      result = (-325*(-26* std::sqrt(a)*(540571185 + 2*a*(39171825 + 4*a*(2909907 + 2*a*(82467 + a*(7469 + 122*a))))) + 231*(30421755 + 4*a*(-3968055 + a*(944775 + 4*a*(-33150 + a*(2925 + 4*(-39 + a)*a)))))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a))))/(262144.* std::pow(a,7.5)* std::pow(M_E,a)) - (25*(-26* std::sqrt(a)*(540571185 + 2*a*(39171825 + 4*a*(2909907 + 2*a*(82467 + a*(7469 + 122*a))))) + 231*(30421755 + 4*a*(-3968055 + a*(944775 + 4*a*(-33150 + a*(2925 + 4*(-39 + a)*a)))))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a))))/(131072.* std::pow(a,6.5)* std::pow(M_E,a)) + (25*(-26* std::sqrt(a)*(2*a*(4*a*(2*a*(7469 + 244*a) + 2*(82467 + a*(7469 + 122*a))) + 4*(2909907 + 2*a*(82467 + a*(7469 + 122*a)))) + 2*(39171825 + 4*a*(2909907 + 2*a*(82467 + a*(7469 + 122*a))))) - (13*(540571185 + 2*a*(39171825 + 4*a*(2909907 + 2*a*(82467 + a*(7469 + 122*a))))))/ std::sqrt(a) + (231*(30421755 + 4*a*(-3968055 + a*(944775 + 4*a*(-33150 + a*(2925 + 4*(-39 + a)*a))))))/ std::sqrt(a) + 231*(4*a*(944775 + 4*a*(-33150 + a*(2925 + 4*(-39 + a)*a)) + a*(4*a*(2925 + 4*(-39 + a)*a + a*(4*(-39 + a) + 4*a)) + 4*(-33150 + a*(2925 + 4*(-39 + a)*a)))) + 4*(-3968055 + a*(944775 + 4*a*(-33150 + a*(2925 + 4*(-39 + a)*a)))))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a)) + 231*(30421755 + 4*a*(-3968055 + a*(944775 + 4*a*(-33150 + a*(2925 + 4*(-39 + a)*a)))))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a))))/(131072.* std::pow(a,6.5)* std::pow(M_E,a)) ;
      break;
    case 14 : 
      result = (-435*(-2* std::sqrt(a)*(677644592625 + 100391791500*a + 30786816060* std::pow(a,2) + 1928852640* std::pow(a,3) + 206187696* std::pow(a,4) + 5360576* std::pow(a,5) + 158528* std::pow(a,6)) - 429*(-1579591125 + 819047250*a - 196571340* std::pow(a,2) + 28488600* std::pow(a,3) - 2713200* std::pow(a,4) + 171360* std::pow(a,5) - 6720* std::pow(a,6) + 128* std::pow(a,7))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a))))/(1.048576e6* std::pow(a,8.5)* std::pow(M_E,a)) - (29*(-2* std::sqrt(a)*(677644592625 + 100391791500*a + 30786816060* std::pow(a,2) + 1928852640* std::pow(a,3) + 206187696* std::pow(a,4) + 5360576* std::pow(a,5) + 158528* std::pow(a,6)) - 429*(-1579591125 + 819047250*a - 196571340* std::pow(a,2) + 28488600* std::pow(a,3) - 2713200* std::pow(a,4) + 171360* std::pow(a,5) - 6720* std::pow(a,6) + 128* std::pow(a,7))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a))))/(524288.* std::pow(a,7.5)* std::pow(M_E,a)) + (29*(-2* std::sqrt(a)*(100391791500 + 61573632120*a + 5786557920* std::pow(a,2) + 824750784* std::pow(a,3) + 26802880* std::pow(a,4) + 951168* std::pow(a,5)) - (677644592625 + 100391791500*a + 30786816060* std::pow(a,2) + 1928852640* std::pow(a,3) + 206187696* std::pow(a,4) + 5360576* std::pow(a,5) + 158528* std::pow(a,6))/ std::sqrt(a) - (429*(-1579591125 + 819047250*a - 196571340* std::pow(a,2) + 28488600* std::pow(a,3) - 2713200* std::pow(a,4) + 171360* std::pow(a,5) - 6720* std::pow(a,6) + 128* std::pow(a,7)))/ std::sqrt(a) - 429*(819047250 - 393142680*a + 85465800* std::pow(a,2) - 10852800* std::pow(a,3) + 856800* std::pow(a,4) - 40320* std::pow(a,5) + 896* std::pow(a,6))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a)) - 429*(-1579591125 + 819047250*a - 196571340* std::pow(a,2) + 28488600* std::pow(a,3) - 2713200* std::pow(a,4) + 171360* std::pow(a,5) - 6720* std::pow(a,6) + 128* std::pow(a,7))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a))))/(524288.* std::pow(a,7.5)* std::pow(M_E,a)) ;
      break;
    case 16 :
      result = (-0.00001671910285949707*(-34.* std::sqrt(a)*(3.5835440515875e13 + 2.*a*(2.697291221625e12 + 2.*a*(4.22531334225e11 + 2.*a*(1.4130777375e10 + 2.*a*(8.29568025e8 + 2.*a*(1.3438035e7 + 624150.*a + 6196.* std::pow(a,2))))))) + 11405.740530576995* std::pow(2.718281828459045,a)*(9.4670161425e10 + 16.*a*(-3.053876175e9 + a*(7.37142525e8 + 2.*a*(-5.460315e7 + a*(5.460315e6 + 8.*a*(-47481. + a*(2261. + (-68. + a)*a)))))))* std::tr1::erf( std::sqrt(a))))/( std::pow(2.718281828459045,1.*a)* std::pow(a,9.5)) - (1.9669532775878906e-6*(-34.* std::sqrt(a)*(3.5835440515875e13 + 2.*a*(2.697291221625e12 + 2.*a*(4.22531334225e11 + 2.*a*(1.4130777375e10 + 2.*a*(8.29568025e8 + 2.*a*(1.3438035e7 + 624150.*a + 6196.* std::pow(a,2))))))) + 11405.740530576995* std::pow(2.718281828459045,a)*(9.4670161425e10 + 16.*a*(-3.053876175e9 + a*(7.37142525e8 + 2.*a*(-5.460315e7 + a*(5.460315e6 + 8.*a*(-47481. + a*(2261. + (-68. + a)*a)))))))* std::tr1::erf( std::sqrt(a))))/( std::pow(2.718281828459045,1.*a)* std::pow(a,8.5)) + (1.9669532775878906e-6*(-34.* std::sqrt(a)*(2.*a*(2.*a*(2.*a*(2.*a*(2.*a*(624150. + 12392.*a) + 2.*(1.3438035e7 + 624150.*a + 6196.* std::pow(a,2))) + 2.*(8.29568025e8 + 2.*a*(1.3438035e7 + 624150.*a + 6196.* std::pow(a,2)))) + 2.*(1.4130777375e10 + 2.*a*(8.29568025e8 + 2.*a*(1.3438035e7 + 624150.*a + 6196.* std::pow(a,2))))) + 2.*(4.22531334225e11 + 2.*a*(1.4130777375e10 + 2.*a*(8.29568025e8 + 2.*a*(1.3438035e7 + 624150.*a + 6196.* std::pow(a,2)))))) + 2.*(2.697291221625e12 + 2.*a*(4.22531334225e11 + 2.*a*(1.4130777375e10 + 2.*a*(8.29568025e8 + 2.*a*(1.3438035e7 + 624150.*a + 6196.* std::pow(a,2))))))) - (17.*(3.5835440515875e13 + 2.*a*(2.697291221625e12 + 2.*a*(4.22531334225e11 + 2.*a*(1.4130777375e10 + 2.*a*(8.29568025e8 + 2.*a*(1.3438035e7 + 624150.*a + 6196.* std::pow(a,2))))))))/ std::sqrt(a) + (6435.*(9.4670161425e10 + 16.*a*(-3.053876175e9 + a*(7.37142525e8 + 2.*a*(-5.460315e7 + a*(5.460315e6 + 8.*a*(-47481. + a*(2261. + (-68. + a)*a))))))))/ std::sqrt(a) + 11405.740530576995* std::pow(2.718281828459045,a)*(16.*a*(7.37142525e8 + 2.*a*(-5.460315e7 + a*(5.460315e6 + 8.*a*(-47481. + a*(2261. + (-68. + a)*a)))) + a*(2.*a*(5.460315e6 + 8.*a*(-47481. + a*(2261. + (-68. + a)*a)) + a*(8.*a*(2261. + (-68. + a)*a + a*(-68. + 2.*a)) + 8.*(-47481. + a*(2261. + (-68. + a)*a)))) + 2.*(-5.460315e7 + a*(5.460315e6 + 8.*a*(-47481. + a*(2261. + (-68. + a)*a)))))) + 16.*(-3.053876175e9 + a*(7.37142525e8 + 2.*a*(-5.460315e7 + a*(5.460315e6 + 8.*a*(-47481. + a*(2261. + (-68. + a)*a)))))))* std::tr1::erf( std::sqrt(a)) + 11405.740530576995* std::pow(2.718281828459045,a)*(9.4670161425e10 + 16.*a*(-3.053876175e9 + a*(7.37142525e8 + 2.*a*(-5.460315e7 + a*(5.460315e6 + 8.*a*(-47481. + a*(2261. + (-68. + a)*a)))))))* std::tr1::erf( std::sqrt(a))))/( std::pow(2.718281828459045,1.*a)* std::pow(a,8.5)); 
      // result = (-561.*(-34.* std::sqrt(a)*(3583544051587.5e1 + 2*a*(269729122162.5e1 + 2*a*(42253133422.5e1 + 2*a*(1413077737.5e1 + 2*a*(82956802.5e1 + 2*a*(1343803.5e1 + 62415.0e1*a + 619.6e1* std::pow(a,2.))))))) + 643.5e1*(9467016142.5e1 + 1.6e1*a*(-305387617.5e1 + a*(73714252.5e1 + 2*a*(-5460315.0e1 + a*(546031.5e1 + 8*a*(-4748.1e1 + a*(226.1e1 + (-68 + a)*a)))))))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a))))/(3.3554432e7* std::pow(a,9.5)* std::pow(M_E,a)) - (33*(-34* std::sqrt(a)*(3583544051587.5e1 + 2*a*(269729122162.5e1 + 2*a*(42253133422.5e1 + 2*a*(1413077737.5e1 + 2*a*(82956802.5e1 + 2*a*(1343803.5e1 + 62415.0e1*a + 619.6e1* std::pow(a,2))))))) + 643.5e1*(9467016142.5e1 + 16*a*(-305387617.5e1 + a*(73714252.5e1 + 2*a*(-5460315.0e1 + a*(546031.5e1 + 8*a*(-4748.1e1 + a*(226.1e1 + (-6.8e1 + a)*a)))))))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a))))/(1.6777216e7* std::pow(a,8.5)* std::pow(M_E,a)) + (33*(-34* std::sqrt(a)*(2*a*(2*a*(2*a*(2*a*(2*a*(62415.0e1 + 1239.2e1*a) + 2*(1343803.5e1 + 62415.0e1*a + 619.6e1* std::pow(a,2))) + 2*(82956802.5e1 + 2*a*(1343803.5e1 + 62415.0e1*a + 6196.* std::pow(a,2)))) + 2*(14130777375. + 2*a*(829568025. + 2*a*(13438035. + 624150.*a + 6196.* std::pow(a,2))))) + 2*(422531334225. + 2*a*(14130777375. + 2*a*(829568025. + 2*a*(13438035. + 624150.*a + 6196.* std::pow(a,2)))))) + 2*(2697291221625. + 2*a*(422531334225. + 2*a*(14130777375. + 2*a*(829568025. + 2*a*(13438035. + 624150.*a + 6196.* std::pow(a,2))))))) - (17*(35835440515875. + 2*a*(2697291221625. + 2*a*(422531334225. + 2*a*(14130777375. + 2*a*(829568025. + 2*a*(13438035. + 624150.*a + 6196.* std::pow(a,2))))))))/ std::sqrt(a) + (6435.*(94670161425. + 16.*a*(-3053876175. + a*(737142525. + 2*a*(-54603150. + a*(5460315. + 8*a*(-47481. + a*(2261. + (-68. + a)*a))))))))/ std::sqrt(a) + 6435.*(16*a*(737142525. + 2*a*(-54603150. + a*(5460315. + 8*a*(-47481. + a*(2261. + (-68. + a)*a)))) + a*(2*a*(5460315. + 8*a*(-47481. + a*(2261. + (-68 + a)*a)) + a*(8*a*(2261. + (-68. + a)*a + a*(-68 + 2*a)) + 8*(-47481. + a*(2261. + (-68 + a)*a)))) + 2*(-54603150. + a*(5460315. + 8*a*(-47481. + a*(2261. + (-68. + a)*a)))))) + 16*(-3053876175. + a*(737142525. + 2*a*(-54603150 + a*(5460315. + 8*a*(-47481. + a*(2261. + (-68 + a)*a)))))))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a)) + 6435.*(94670161425. + 16.*a*(-3053876175 + a*(737142525. + 2.*a*(-54603150. + a*(5460315. + 8.*a*(-47481. + a*(2261. + (-68 + a)*a)))))))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a))))/(1.6777216e7* std::pow(a,8.5)* std::pow(M_E,a)) ;
      break;
    case 18 : 
      result = (-5.237758159637451e-6*(-114.* std::sqrt(a)*(1.371596246645625e15 + 8.*a*(2.612564279325e13 + a*(8.312704525125e12 + 4.*a*(1.45568097675e11 + 2.*a*(9.078873375e9 + 2.*a*(1.67739e8 + a*(9.612735e6 + 2.*a*(79390. + 1363.*a)))))))) - 21544.176557756546* std::pow(2.718281828459045,a)*(-6.432002143875e12 + 2.*a*(1.653943408425e12 + 8.*a*(-5.0119497225e10 + 2.*a*(3.772435275e9 + a*(-3.90251925e8 + 2.*a*(1.4453775e7 + 4.*a*(-192717. + a*(7182. + a*(-171. + 2.*a)))))))))* std::tr1::erf( std::sqrt(a))))/( std::pow(2.718281828459045,1.*a)* std::pow(a,10.5)) - (5.513429641723633e-7*(-114.* std::sqrt(a)*(1.371596246645625e15 + 8.*a*(2.612564279325e13 + a*(8.312704525125e12 + 4.*a*(1.45568097675e11 + 2.*a*(9.078873375e9 + 2.*a*(1.67739e8 + a*(9.612735e6 + 2.*a*(79390. + 1363.*a)))))))) - 21544.176557756546* std::pow(2.718281828459045,a)*(-6.432002143875e12 + 2.*a*(1.653943408425e12 + 8.*a*(-5.0119497225e10 + 2.*a*(3.772435275e9 + a*(-3.90251925e8 + 2.*a*(1.4453775e7 + 4.*a*(-192717. + a*(7182. + a*(-171. + 2.*a)))))))))* std::tr1::erf( std::sqrt(a))))/( std::pow(2.718281828459045,1.*a)* std::pow(a,9.5)) + (5.513429641723633e-7*(-114.* std::sqrt(a)*(8.*a*(8.312704525125e12 + 4.*a*(1.45568097675e11 + 2.*a*(9.078873375e9 + 2.*a*(1.67739e8 + a*(9.612735e6 + 2.*a*(79390. + 1363.*a))))) + a*(4.*a*(2.*a*(2.*a*(9.612735e6 + 2.*a*(79390. + 1363.*a) + a*(2726.*a + 2.*(79390. + 1363.*a))) + 2.*(1.67739e8 + a*(9.612735e6 + 2.*a*(79390. + 1363.*a)))) + 2.*(9.078873375e9 + 2.*a*(1.67739e8 + a*(9.612735e6 + 2.*a*(79390. + 1363.*a))))) + 4.*(1.45568097675e11 + 2.*a*(9.078873375e9 + 2.*a*(1.67739e8 + a*(9.612735e6 + 2.*a*(79390. + 1363.*a))))))) + 8.*(2.612564279325e13 + a*(8.312704525125e12 + 4.*a*(1.45568097675e11 + 2.*a*(9.078873375e9 + 2.*a*(1.67739e8 + a*(9.612735e6 + 2.*a*(79390. + 1363.*a)))))))) - (57.*(1.371596246645625e15 + 8.*a*(2.612564279325e13 + a*(8.312704525125e12 + 4.*a*(1.45568097675e11 + 2.*a*(9.078873375e9 + 2.*a*(1.67739e8 + a*(9.612735e6 + 2.*a*(79390. + 1363.*a)))))))))/ std::sqrt(a) - (12155.*(-6.432002143875e12 + 2.*a*(1.653943408425e12 + 8.*a*(-5.0119497225e10 + 2.*a*(3.772435275e9 + a*(-3.90251925e8 + 2.*a*(1.4453775e7 + 4.*a*(-192717. + a*(7182. + a*(-171. + 2.*a))))))))))/ std::sqrt(a) - 21544.176557756546* std::pow(2.718281828459045,a)*(2.*a*(8.*a*(2.*a*(-3.90251925e8 + 2.*a*(1.4453775e7 + 4.*a*(-192717. + a*(7182. + a*(-171. + 2.*a)))) + a*(2.*a*(4.*a*(7182. + a*(-171. + 2.*a) + a*(-171. + 4.*a)) + 4.*(-192717. + a*(7182. + a*(-171. + 2.*a)))) + 2.*(1.4453775e7 + 4.*a*(-192717. + a*(7182. + a*(-171. + 2.*a)))))) + 2.*(3.772435275e9 + a*(-3.90251925e8 + 2.*a*(1.4453775e7 + 4.*a*(-192717. + a*(7182. + a*(-171. + 2.*a))))))) + 8.*(-5.0119497225e10 + 2.*a*(3.772435275e9 + a*(-3.90251925e8 + 2.*a*(1.4453775e7 + 4.*a*(-192717. + a*(7182. + a*(-171. + 2.*a)))))))) + 2.*(1.653943408425e12 + 8.*a*(-5.0119497225e10 + 2.*a*(3.772435275e9 + a*(-3.90251925e8 + 2.*a*(1.4453775e7 + 4.*a*(-192717. + a*(7182. + a*(-171. + 2.*a)))))))))* std::tr1::erf( std::sqrt(a)) - 21544.176557756546* std::pow(2.718281828459045,a)*(-6.432002143875e12 + 2.*a*(1.653943408425e12 + 8.*a*(-5.0119497225e10 + 2.*a*(3.772435275e9 + a*(-3.90251925e8 + 2.*a*(1.4453775e7 + 4.*a*(-192717. + a*(7182. + a*(-171. + 2.*a)))))))))* std::tr1::erf( std::sqrt(a))))/( std::pow(2.718281828459045,1.*a)* std::pow(a,9.5)); 
      // result = (-703*(-114* std::sqrt(a)*(1371596246645625 + 8*a*(26125642793250 + a*(8312704525125 + 4*a*(145568097675 + 2*a*(9078873375 + 2*a*(167739000 + a*(9612735 + 2*a*(79390 + 1363*a)))))))) - 12155*(-6432002143875 + 2*a*(1653943408425 + 8*a*(-50119497225 + 2*a*(3772435275 + a*(-390251925 + 2*a*(14453775 + 4*a*(-192717 + a*(7182 + a*(-171 + 2*a)))))))))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a))))/(1.34217728e8* std::pow(a,10.5)* std::pow(M_E,a)) - (37*(-114* std::sqrt(a)*(1371596246645625 + 8*a*(26125642793250 + a*(8312704525125 + 4*a*(145568097675 + 2*a*(9078873375 + 2*a*(167739000 + a*(9612735 + 2*a*(79390 + 1363*a)))))))) - 12155*(-6432002143875 + 2*a*(1653943408425 + 8*a*(-50119497225 + 2*a*(3772435275 + a*(-390251925 + 2*a*(14453775 + 4*a*(-192717 + a*(7182 + a*(-171 + 2*a)))))))))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a))))/(6.7108864e7* std::pow(a,9.5)* std::pow(M_E,a)) + (37*(-114* std::sqrt(a)*(8*a*(8312704525125 + 4*a*(145568097675 + 2*a*(9078873375 + 2*a*(167739000 + a*(9612735 + 2*a*(79390 + 1363*a))))) + a*(4*a*(2*a*(2*a*(9612735 + 2*a*(79390 + 1363*a) + a*(2726*a + 2*(79390 + 1363*a))) + 2*(167739000 + a*(9612735 + 2*a*(79390 + 1363*a)))) + 2*(9078873375 + 2*a*(167739000 + a*(9612735 + 2*a*(79390 + 1363*a))))) + 4*(145568097675 + 2*a*(9078873375 + 2*a*(167739000 + a*(9612735 + 2*a*(79390 + 1363*a))))))) + 8*(26125642793250 + a*(8312704525125 + 4*a*(145568097675 + 2*a*(9078873375 + 2*a*(167739000 + a*(9612735 + 2*a*(79390 + 1363*a)))))))) - (57*(1371596246645625 + 8*a*(26125642793250 + a*(8312704525125 + 4*a*(145568097675 + 2*a*(9078873375 + 2*a*(167739000 + a*(9612735 + 2*a*(79390 + 1363*a)))))))))/ std::sqrt(a) - (12155*(-6432002143875 + 2*a*(1653943408425 + 8*a*(-50119497225 + 2*a*(3772435275 + a*(-390251925 + 2*a*(14453775 + 4*a*(-192717 + a*(7182 + a*(-171 + 2*a))))))))))/ std::sqrt(a) - 12155*(2*a*(8*a*(2*a*(-390251925 + 2*a*(14453775 + 4*a*(-192717 + a*(7182 + a*(-171 + 2*a)))) + a*(2*a*(4*a*(7182 + a*(-171 + 2*a) + a*(-171 + 4*a)) + 4*(-192717 + a*(7182 + a*(-171 + 2*a)))) + 2*(14453775 + 4*a*(-192717 + a*(7182 + a*(-171 + 2*a)))))) + 2*(3772435275 + a*(-390251925 + 2*a*(14453775 + 4*a*(-192717 + a*(7182 + a*(-171 + 2*a))))))) + 8*(-50119497225 + 2*a*(3772435275 + a*(-390251925 + 2*a*(14453775 + 4*a*(-192717 + a*(7182 + a*(-171 + 2*a)))))))) + 2*(1653943408425 + 8*a*(-50119497225 + 2*a*(3772435275 + a*(-390251925 + 2*a*(14453775 + 4*a*(-192717 + a*(7182 + a*(-171 + 2*a)))))))))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a)) - 12155*(-6432002143875 + 2*a*(1653943408425 + 8*a*(-50119497225 + 2*a*(3772435275 + a*(-390251925 + 2*a*(14453775 + 4*a*(-192717 + a*(7182 + a*(-171 + 2*a)))))))))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a))))/(6.7108864e7* std::pow(a,9.5)* std::pow(M_E,a)) ; 
      break;
    case 20 : 
      result = (-8.01868736743927e-7*(-30.* std::sqrt(a)*(1.504202171771324e18 + 2.*a*(1.1570785936702493e17 + 8.*a*(4.656112058613015e15 + 2.*a*(1.68771652444395e14 + a*(2.1961373669235e13 + 2.*a*(4.43173986255e11 + 4.*a*(7.186777455e9 + a*(1.52487654e8 + a*(4.302265e6 + 28794.*a))))))))) + 81867.87091947487* std::pow(2.718281828459045,a)*(4.88493636505875e14 + 4.*a*(-6.2627389295625e13 + a*(1.5233689288125e13 + 8.*a*(-2.9016551025e11 + a*(3.0775129875e10 + 4.*a*(-5.95647675e8 + a*(3.4232625e7 + 2.*a*(-724500. + a*(21735. + 4.*(-105. + a)*a)))))))))* std::tr1::erf( std::sqrt(a))))/( std::pow(2.718281828459045,1.*a)* std::pow(a,11.5)) - (7.636845111846924e-8*(-30.* std::sqrt(a)*(1.504202171771324e18 + 2.*a*(1.1570785936702493e17 + 8.*a*(4.656112058613015e15 + 2.*a*(1.68771652444395e14 + a*(2.1961373669235e13 + 2.*a*(4.43173986255e11 + 4.*a*(7.186777455e9 + a*(1.52487654e8 + a*(4.302265e6 + 28794.*a))))))))) + 81867.87091947487* std::pow(2.718281828459045,a)*(4.88493636505875e14 + 4.*a*(-6.2627389295625e13 + a*(1.5233689288125e13 + 8.*a*(-2.9016551025e11 + a*(3.0775129875e10 + 4.*a*(-5.95647675e8 + a*(3.4232625e7 + 2.*a*(-724500. + a*(21735. + 4.*(-105. + a)*a)))))))))* std::tr1::erf( std::sqrt(a))))/( std::pow(2.718281828459045,1.*a)* std::pow(a,10.5)) + (7.636845111846924e-8*(-30.* std::sqrt(a)*(2.*a*(8.*a*(2.*a*(2.1961373669235e13 + 2.*a*(4.43173986255e11 + 4.*a*(7.186777455e9 + a*(1.52487654e8 + a*(4.302265e6 + 28794.*a)))) + a*(2.*a*(4.*a*(1.52487654e8 + a*(4.302265e6 + 28794.*a) + a*(4.302265e6 + 57588.*a)) + 4.*(7.186777455e9 + a*(1.52487654e8 + a*(4.302265e6 + 28794.*a)))) + 2.*(4.43173986255e11 + 4.*a*(7.186777455e9 + a*(1.52487654e8 + a*(4.302265e6 + 28794.*a)))))) + 2.*(1.68771652444395e14 + a*(2.1961373669235e13 + 2.*a*(4.43173986255e11 + 4.*a*(7.186777455e9 + a*(1.52487654e8 + a*(4.302265e6 + 28794.*a))))))) + 8.*(4.656112058613015e15 + 2.*a*(1.68771652444395e14 + a*(2.1961373669235e13 + 2.*a*(4.43173986255e11 + 4.*a*(7.186777455e9 + a*(1.52487654e8 + a*(4.302265e6 + 28794.*a)))))))) + 2.*(1.1570785936702493e17 + 8.*a*(4.656112058613015e15 + 2.*a*(1.68771652444395e14 + a*(2.1961373669235e13 + 2.*a*(4.43173986255e11 + 4.*a*(7.186777455e9 + a*(1.52487654e8 + a*(4.302265e6 + 28794.*a))))))))) - (15.*(1.504202171771324e18 + 2.*a*(1.1570785936702493e17 + 8.*a*(4.656112058613015e15 + 2.*a*(1.68771652444395e14 + a*(2.1961373669235e13 + 2.*a*(4.43173986255e11 + 4.*a*(7.186777455e9 + a*(1.52487654e8 + a*(4.302265e6 + 28794.*a))))))))))/ std::sqrt(a) + (46189.*(4.88493636505875e14 + 4.*a*(-6.2627389295625e13 + a*(1.5233689288125e13 + 8.*a*(-2.9016551025e11 + a*(3.0775129875e10 + 4.*a*(-5.95647675e8 + a*(3.4232625e7 + 2.*a*(-724500. + a*(21735. + 4.*(-105. + a)*a))))))))))/ std::sqrt(a) + 81867.87091947487* std::pow(2.718281828459045,a)*(4.*a*(1.5233689288125e13 + 8.*a*(-2.9016551025e11 + a*(3.0775129875e10 + 4.*a*(-5.95647675e8 + a*(3.4232625e7 + 2.*a*(-724500. + a*(21735. + 4.*(-105. + a)*a)))))) + a*(8.*a*(3.0775129875e10 + 4.*a*(-5.95647675e8 + a*(3.4232625e7 + 2.*a*(-724500. + a*(21735. + 4.*(-105. + a)*a)))) + a*(4.*a*(3.4232625e7 + 2.*a*(-724500. + a*(21735. + 4.*(-105. + a)*a)) + a*(2.*a*(21735. + 4.*(-105. + a)*a + a*(4.*(-105. + a) + 4.*a)) + 2.*(-724500. + a*(21735. + 4.*(-105. + a)*a)))) + 4.*(-5.95647675e8 + a*(3.4232625e7 + 2.*a*(-724500. + a*(21735. + 4.*(-105. + a)*a)))))) + 8.*(-2.9016551025e11 + a*(3.0775129875e10 + 4.*a*(-5.95647675e8 + a*(3.4232625e7 + 2.*a*(-724500. + a*(21735. + 4.*(-105. + a)*a)))))))) + 4.*(-6.2627389295625e13 + a*(1.5233689288125e13 + 8.*a*(-2.9016551025e11 + a*(3.0775129875e10 + 4.*a*(-5.95647675e8 + a*(3.4232625e7 + 2.*a*(-724500. + a*(21735. + 4.*(-105. + a)*a)))))))))* std::tr1::erf( std::sqrt(a)) + 81867.87091947487* std::pow(2.718281828459045,a)*(4.88493636505875e14 + 4.*a*(-6.2627389295625e13 + a*(1.5233689288125e13 + 8.*a*(-2.9016551025e11 + a*(3.0775129875e10 + 4.*a*(-5.95647675e8 + a*(3.4232625e7 + 2.*a*(-724500. + a*(21735. + 4.*(-105. + a)*a)))))))))* std::tr1::erf( std::sqrt(a))))/( std::pow(2.718281828459045,1.*a)* std::pow(a,10.5)); 
      // result = (-861*(-30* std::sqrt(a)*(1504202171771324025 + 2*a*(115707859367024925 + 8*a*(4656112058613015 + 2*a*(168771652444395 + a*(21961373669235 + 2*a*(443173986255 + 4*a*(7186777455 + a*(152487654 + a*(4302265 + 28794*a))))))))) + 46189*(488493636505875 + 4*a*(-62627389295625 + a*(15233689288125 + 8*a*(-290165510250 + a*(30775129875 + 4*a*(-595647675 + a*(34232625 + 2*a*(-724500 + a*(21735 + 4*(-105 + a)*a)))))))))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a))))/(1.073741824e9* std::pow(a,11.5)* std::pow(M_E,a)) - (41*(-30* std::sqrt(a)*(1504202171771324025 + 2*a*(115707859367024925 + 8*a*(4656112058613015 + 2*a*(168771652444395 + a*(21961373669235 + 2*a*(443173986255 + 4*a*(7186777455 + a*(152487654 + a*(4302265 + 28794*a))))))))) + 46189*(488493636505875 + 4*a*(-62627389295625 + a*(15233689288125 + 8*a*(-290165510250 + a*(30775129875 + 4*a*(-595647675 + a*(34232625 + 2*a*(-724500 + a*(21735 + 4*(-105 + a)*a)))))))))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a))))/(5.36870912e8* std::pow(a,10.5)* std::pow(M_E,a)) + (41*(-30* std::sqrt(a)*(2*a*(8*a*(2*a*(21961373669235 + 2*a*(443173986255 + 4*a*(7186777455 + a*(152487654 + a*(4302265 + 28794*a)))) + a*(2*a*(4*a*(152487654 + a*(4302265 + 28794*a) + a*(4302265 + 57588*a)) + 4*(7186777455 + a*(152487654 + a*(4302265 + 28794*a)))) + 2*(443173986255 + 4*a*(7186777455 + a*(152487654 + a*(4302265 + 28794*a)))))) + 2*(168771652444395 + a*(21961373669235 + 2*a*(443173986255 + 4*a*(7186777455 + a*(152487654 + a*(4302265 + 28794*a))))))) + 8*(4656112058613015 + 2*a*(168771652444395 + a*(21961373669235 + 2*a*(443173986255 + 4*a*(7186777455 + a*(152487654 + a*(4302265 + 28794*a)))))))) + 2*(115707859367024925 + 8*a*(4656112058613015 + 2*a*(168771652444395 + a*(21961373669235 + 2*a*(443173986255 + 4*a*(7186777455 + a*(152487654 + a*(4302265 + 28794*a))))))))) - (15*(1504202171771324025 + 2*a*(115707859367024925 + 8*a*(4656112058613015 + 2*a*(168771652444395 + a*(21961373669235 + 2*a*(443173986255 + 4*a*(7186777455 + a*(152487654 + a*(4302265 + 28794*a))))))))))/ std::sqrt(a) + (46189*(488493636505875 + 4*a*(-62627389295625 + a*(15233689288125 + 8*a*(-290165510250 + a*(30775129875 + 4*a*(-595647675 + a*(34232625 + 2*a*(-724500 + a*(21735 + 4*(-105 + a)*a))))))))))/ std::sqrt(a) + 46189*(4*a*(15233689288125 + 8*a*(-290165510250 + a*(30775129875 + 4*a*(-595647675 + a*(34232625 + 2*a*(-724500 + a*(21735 + 4*(-105 + a)*a)))))) + a*(8*a*(30775129875 + 4*a*(-595647675 + a*(34232625 + 2*a*(-724500 + a*(21735 + 4*(-105 + a)*a)))) + a*(4*a*(34232625 + 2*a*(-724500 + a*(21735 + 4*(-105 + a)*a)) + a*(2*a*(21735 + 4*(-105 + a)*a + a*(4*(-105 + a) + 4*a)) + 2*(-724500 + a*(21735 + 4*(-105 + a)*a)))) + 4*(-595647675 + a*(34232625 + 2*a*(-724500 + a*(21735 + 4*(-105 + a)*a)))))) + 8*(-290165510250 + a*(30775129875 + 4*a*(-595647675 + a*(34232625 + 2*a*(-724500 + a*(21735 + 4*(-105 + a)*a)))))))) + 4*(-62627389295625 + a*(15233689288125 + 8*a*(-290165510250 + a*(30775129875 + 4*a*(-595647675 + a*(34232625 + 2*a*(-724500 + a*(21735 + 4*(-105 + a)*a)))))))))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a)) + 46189*(488493636505875 + 4*a*(-62627389295625 + a*(15233689288125 + 8*a*(-290165510250 + a*(30775129875 + 4*a*(-595647675 + a*(34232625 + 2*a*(-724500 + a*(21735 + 4*(-105 + a)*a)))))))))* std::pow(M_E,a)* std::sqrt(M_PI)* std::tr1::erf( std::sqrt(a))))/(5.36870912e8* std::pow(a,10.5)* std::pow(M_E,a)) ; 
      break;
    default :
      utlException(true, "l is too big. l=" << l);
       break;
    }
  return result;

}

/** get the analytic root of polynomial with order no more than 4.
 *  In mathematica: 
 *   Solve[a3 x^3 + a2 x^2 + a1 x + a0 == 0, x] 
 * */
inline std::vector<std::complex<double> >
PolynomialRoot(const std::vector<double>& coef)
{
  int order = coef.size()-1;
  utlSAException(order==0 || order>=5)(order).msg("polynomial order should be 1,2,3,4");
  std::vector<std::complex<double> > result(order);
  utlException(coef[order]==0, "the first coef cannot be zero");
  switch ( order )
    {
    case 1 :
       {
       result[0] = std::complex<double>(-coef[0]/coef[1], 0);
       return result;
       }
    case 2 :
       {
       double tmp = coef[1]*coef[1] - 4.0*coef[0]*coef[2];
       std::complex<double> tmp1(tmp, 0);
       tmp1 = std::sqrt(tmp1);
       result[0] = (-coef[1] - tmp1)/(2.0*coef[2]);
       result[1] = (-coef[1] + tmp1)/(2.0*coef[2]);
       return result;
       }
    case 3 :
       {
       double a0 = coef[0];
       double a1 = coef[1];
       double a2 = coef[2];
       double a3 = coef[3];

       double temp_2_3 = std::pow(2.0,1.0/3.0);
       std::complex<double> temp0 (4.0* PowInteger(-a2*a2+3.0*a1*a3, 3) + PowInteger(-2.0*a2*a2*a2+9.0*a1*a2*a3-27.0*a0*a3*a3, 2), 0 );

       std::complex<double> temp1 = -2.0*a2*a2*a2 + 9.0*a1*a2*a3 - 27.0*a0*a3*a3 + std::sqrt(temp0);
       temp1 = std::pow(temp1, 1.0/3.0);
       double temp2 = a2/(3.0*a3);
       double temp3 = -a2*a2+3.0*a1*a3;

       result[0] = -temp2 - temp_2_3*temp3 / (3.0*a3*temp1) + temp1/(3.0*temp_2_3*a3);
       result[1] = -temp2 + (std::complex<double>(1, std::sqrt(3)) *temp3) / (3.0*std::pow(2,2.0/3.0)*a3*temp1) - (std::complex<double>(1,-std::sqrt(3)) * temp1) / (6.0*temp_2_3*a3);
       result[2] = -temp2 + (std::complex<double>(1, -std::sqrt(3)) *temp3) / (3.0*std::pow(2,2.0/3.0)*a3*temp1) - (std::complex<double>(1,std::sqrt(3)) * temp1) / (6.0*temp_2_3*a3);

       return result;
       }
    case 4 :
       {
       utlGlobalException(true, "TODO: for order 4");
       // return;
       }
    default :
       {
       utlSAException(true)(order).msg("polynomial order should be 1,2,3,4");
       // return;
       }
    }
  return std::vector<std::complex<double> >();
}

/** calculate determinant of a small matrix with (i,j) defined. 
 * \param row shoud be in [1,4]. 
 * */
template <class TMatrixType>
inline double
DeterminantSmallMatrix ( const TMatrixType& mat, const int row  )
{
  switch ( row )
    {
    case 1 : return mat(0,0);
    case 2 : return mat(0,0)*mat(1,1) - mat(0,1)*mat(1,0);
    case 3 : return 
             -mat(0,2)*mat(1,1)*mat(2,0) 
             +mat(0,1)*mat(1,2)*mat(2,0)
             +mat(0,2)*mat(1,0)*mat(2,1) 
             -mat(0,0)*mat(1,2)*mat(2,1)
             -mat(0,1)*mat(1,0)*mat(2,2) 
             +mat(0,0)*mat(1,1)*mat(2,2);
    case 4:
            return 
            + mat(0,0)*mat(1,1)*mat(2,2)*mat(3,3)
            - mat(0,0)*mat(1,1)*mat(3,2)*mat(2,3)
            - mat(0,0)*mat(2,1)*mat(1,2)*mat(3,3)
            + mat(0,0)*mat(2,1)*mat(3,2)*mat(1,3)
            + mat(0,0)*mat(3,1)*mat(1,2)*mat(2,3)
            - mat(0,0)*mat(3,1)*mat(2,2)*mat(1,3)
            - mat(1,0)*mat(0,1)*mat(2,2)*mat(3,3)
            + mat(1,0)*mat(0,1)*mat(3,2)*mat(2,3)
            + mat(1,0)*mat(2,1)*mat(0,2)*mat(3,3)
            - mat(1,0)*mat(2,1)*mat(3,2)*mat(0,3)
            - mat(1,0)*mat(3,1)*mat(0,2)*mat(2,3)
            + mat(1,0)*mat(3,1)*mat(2,2)*mat(0,3)
            + mat(2,0)*mat(0,1)*mat(1,2)*mat(3,3)
            - mat(2,0)*mat(0,1)*mat(3,2)*mat(1,3)
            - mat(2,0)*mat(1,1)*mat(0,2)*mat(3,3)
            + mat(2,0)*mat(1,1)*mat(3,2)*mat(0,3)
            + mat(2,0)*mat(3,1)*mat(0,2)*mat(1,3)
            - mat(2,0)*mat(3,1)*mat(1,2)*mat(0,3)
            - mat(3,0)*mat(0,1)*mat(1,2)*mat(2,3)
            + mat(3,0)*mat(0,1)*mat(2,2)*mat(1,3)
            + mat(3,0)*mat(1,1)*mat(0,2)*mat(2,3)
            - mat(3,0)*mat(1,1)*mat(2,2)*mat(0,3)
            - mat(3,0)*mat(2,1)*mat(0,2)*mat(1,3)
            + mat(3,0)*mat(2,1)*mat(1,2)*mat(0,3);
    default :
         utlGlobalException(true, "size too large");
    }
}

/** inverse a small matrix with (i,j) defined. 
 * result should be allocated correctly.  
 * \param row shoud be in [1,4]. 
 * */
template <class TMatrixType>
inline void
InverseSmallMatrix ( const TMatrixType& mat, TMatrixType& result, const int row  )
{
  switch ( row )
    {
    case 1 :
       {
       result(0,0)=1.0/mat(0,0);
       return;
       }
    case 2 :
       {
       double det = DeterminantSmallMatrix(mat,row);
       double detInv = 1.0/det;
       utlException(det==0, "det==0, cannot invert the matrix");
       result(0,0) =  mat(1,1)*detInv;
       result(0,1) = -mat(0,1)*detInv;
       result(1,0) = -mat(1,0)*detInv;
       result(1,1) =  mat(0,0)*detInv;
       return;
       }
    case 3 :
       {
       double det = DeterminantSmallMatrix(mat,row);
       utlException(det==0, "det==0, cannot invert the matrix");
       double detInv = 1.0/det;
       result(0,0) = (-mat(1,2)*mat(2,1) + mat(1,1)*mat(2,2)) * detInv;
       result(0,1) = ( mat(0,2)*mat(2,1) - mat(0,1)*mat(2,2)) * detInv;
       result(0,2) = (-mat(0,2)*mat(1,1) + mat(0,1)*mat(1,2)) * detInv;
       result(1,0) = ( mat(1,2)*mat(2,0) - mat(1,0)*mat(2,2)) * detInv;
       result(1,1) = (-mat(0,2)*mat(2,0) + mat(0,0)*mat(2,2)) * detInv;
       result(1,2) = ( mat(0,2)*mat(1,0) - mat(0,0)*mat(1,2)) * detInv;
       result(2,0) = (-mat(1,1)*mat(2,0) + mat(1,0)*mat(2,1)) * detInv;
       result(2,1) = ( mat(0,1)*mat(2,0) - mat(0,0)*mat(2,1)) * detInv;
       result(2,2) = (-mat(0,1)*mat(1,0) + mat(0,0)*mat(1,1)) * detInv;
       return;
       }
    case 4 :
       {
       double det = DeterminantSmallMatrix(mat,row);
       double detInv = 1.0/det;
       utlException(det==0, "det==0, cannot invert the matrix");
       result(0,0) = ( mat(1,1)*mat(2,2)*mat(3,3) - mat(1,1)*mat(2,3)*mat(3,2) - mat(2,1)*mat(1,2)*mat(3,3)
                       +mat(2,1)*mat(1,3)*mat(3,2) + mat(3,1)*mat(1,2)*mat(2,3) - mat(3,1)*mat(1,3)*mat(2,2))*detInv;
       result(0,1) = (-mat(0,1)*mat(2,2)*mat(3,3) + mat(0,1)*mat(2,3)*mat(3,2) + mat(2,1)*mat(0,2)*mat(3,3)
                      - mat(2,1)*mat(0,3)*mat(3,2) - mat(3,1)*mat(0,2)*mat(2,3) + mat(3,1)*mat(0,3)*mat(2,2))*detInv;
       result(0,2) = ( mat(0,1)*mat(1,2)*mat(3,3) - mat(0,1)*mat(1,3)*mat(3,2) - mat(1,1)*mat(0,2)*mat(3,3)
                       +mat(1,1)*mat(0,3)*mat(3,2) + mat(3,1)*mat(0,2)*mat(1,3) - mat(3,1)*mat(0,3)*mat(1,2))*detInv;
       result(0,3) = (-mat(0,1)*mat(1,2)*mat(2,3) + mat(0,1)*mat(1,3)*mat(2,2) + mat(1,1)*mat(0,2)*mat(2,3)
                      - mat(1,1)*mat(0,3)*mat(2,2) - mat(2,1)*mat(0,2)*mat(1,3) + mat(2,1)*mat(0,3)*mat(1,2))*detInv;
       result(1,0) = (-mat(1,0)*mat(2,2)*mat(3,3) + mat(1,0)*mat(2,3)*mat(3,2) + mat(2,0)*mat(1,2)*mat(3,3)
                      - mat(2,0)*mat(1,3)*mat(3,2) - mat(3,0)*mat(1,2)*mat(2,3) + mat(3,0)*mat(1,3)*mat(2,2))*detInv;
       result(1,1) = ( mat(0,0)*mat(2,2)*mat(3,3) - mat(0,0)*mat(2,3)*mat(3,2) - mat(2,0)*mat(0,2)*mat(3,3)
                       +mat(2,0)*mat(0,3)*mat(3,2) + mat(3,0)*mat(0,2)*mat(2,3) - mat(3,0)*mat(0,3)*mat(2,2))*detInv;
       result(1,2) = (-mat(0,0)*mat(1,2)*mat(3,3) + mat(0,0)*mat(1,3)*mat(3,2) + mat(1,0)*mat(0,2)*mat(3,3)
                      - mat(1,0)*mat(0,3)*mat(3,2) - mat(3,0)*mat(0,2)*mat(1,3) + mat(3,0)*mat(0,3)*mat(1,2))*detInv;
       result(1,3) = ( mat(0,0)*mat(1,2)*mat(2,3) - mat(0,0)*mat(1,3)*mat(2,2) - mat(1,0)*mat(0,2)*mat(2,3)
                       +mat(1,0)*mat(0,3)*mat(2,2) + mat(2,0)*mat(0,2)*mat(1,3) - mat(2,0)*mat(0,3)*mat(1,2))*detInv;
       result(2,0) = ( mat(1,0)*mat(2,1)*mat(3,3) - mat(1,0)*mat(2,3)*mat(3,1) - mat(2,0)*mat(1,1)*mat(3,3)
                       +mat(2,0)*mat(1,3)*mat(3,1) + mat(3,0)*mat(1,1)*mat(2,3) - mat(3,0)*mat(1,3)*mat(2,1))*detInv;
       result(2,1) = (-mat(0,0)*mat(2,1)*mat(3,3) + mat(0,0)*mat(2,3)*mat(3,1) + mat(2,0)*mat(0,1)*mat(3,3)
                      - mat(2,0)*mat(0,3)*mat(3,1) - mat(3,0)*mat(0,1)*mat(2,3) + mat(3,0)*mat(0,3)*mat(2,1))*detInv;
       result(2,2) = ( mat(0,0)*mat(1,1)*mat(3,3) - mat(0,0)*mat(1,3)*mat(3,1) - mat(1,0)*mat(0,1)*mat(3,3)
                       +mat(1,0)*mat(0,3)*mat(3,1) + mat(3,0)*mat(0,1)*mat(1,3) - mat(3,0)*mat(0,3)*mat(1,1))*detInv;
       result(2,3) = (-mat(0,0)*mat(1,1)*mat(2,3) + mat(0,0)*mat(1,3)*mat(2,1) + mat(1,0)*mat(0,1)*mat(2,3)
                      - mat(1,0)*mat(0,3)*mat(2,1) - mat(2,0)*mat(0,1)*mat(1,3) + mat(2,0)*mat(0,3)*mat(1,1))*detInv;
       result(3,0) = (-mat(1,0)*mat(2,1)*mat(3,2) + mat(1,0)*mat(2,2)*mat(3,1) + mat(2,0)*mat(1,1)*mat(3,2)
                      - mat(2,0)*mat(1,2)*mat(3,1) - mat(3,0)*mat(1,1)*mat(2,2) + mat(3,0)*mat(1,2)*mat(2,1))*detInv;
       result(3,1) = ( mat(0,0)*mat(2,1)*mat(3,2) - mat(0,0)*mat(2,2)*mat(3,1) - mat(2,0)*mat(0,1)*mat(3,2)
                       +mat(2,0)*mat(0,2)*mat(3,1) + mat(3,0)*mat(0,1)*mat(2,2) - mat(3,0)*mat(0,2)*mat(2,1))*detInv;
       result(3,2) = (-mat(0,0)*mat(1,1)*mat(3,2) + mat(0,0)*mat(1,2)*mat(3,1) + mat(1,0)*mat(0,1)*mat(3,2)
                      - mat(1,0)*mat(0,2)*mat(3,1) - mat(3,0)*mat(0,1)*mat(1,2) + mat(3,0)*mat(0,2)*mat(1,1))*detInv;
       result(3,3) = ( mat(0,0)*mat(1,1)*mat(2,2) - mat(0,0)*mat(1,2)*mat(2,1) - mat(1,0)*mat(0,1)*mat(2,2)
                       +mat(1,0)*mat(0,2)*mat(2,1) + mat(2,0)*mat(0,1)*mat(1,2) - mat(2,0)*mat(0,2)*mat(1,1))*detInv;
       return;
       }
    default :
     utlGlobalException(true, "size too big");
     return;
    }
}

}


#endif 
